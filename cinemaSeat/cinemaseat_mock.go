// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package cinemaSeat is a generated GoMock package.
package cinemaSeat

import (
	infrastructure "cinemaxxi_layout/infrastructure"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ProcessGetCinemaSeatStatus mocks base method.
func (m *MockService) ProcessGetCinemaSeatStatus() (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessGetCinemaSeatStatus")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessGetCinemaSeatStatus indicates an expected call of ProcessGetCinemaSeatStatus.
func (mr *MockServiceMockRecorder) ProcessGetCinemaSeatStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessGetCinemaSeatStatus", reflect.TypeOf((*MockService)(nil).ProcessGetCinemaSeatStatus))
}

// ProcessGetCinemaTransactionStatus mocks base method.
func (m *MockService) ProcessGetCinemaTransactionStatus() (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessGetCinemaTransactionStatus")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessGetCinemaTransactionStatus indicates an expected call of ProcessGetCinemaTransactionStatus.
func (mr *MockServiceMockRecorder) ProcessGetCinemaTransactionStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessGetCinemaTransactionStatus", reflect.TypeOf((*MockService)(nil).ProcessGetCinemaTransactionStatus))
}

// ProcessRemoveBookingSeat mocks base method.
func (m *MockService) ProcessRemoveBookingSeat(seatID string) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRemoveBookingSeat", seatID)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessRemoveBookingSeat indicates an expected call of ProcessRemoveBookingSeat.
func (mr *MockServiceMockRecorder) ProcessRemoveBookingSeat(seatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRemoveBookingSeat", reflect.TypeOf((*MockService)(nil).ProcessRemoveBookingSeat), seatID)
}

// ProcessSetBookingSeat mocks base method.
func (m *MockService) ProcessSetBookingSeat(seatID string) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSetBookingSeat", seatID)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessSetBookingSeat indicates an expected call of ProcessSetBookingSeat.
func (mr *MockServiceMockRecorder) ProcessSetBookingSeat(seatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSetBookingSeat", reflect.TypeOf((*MockService)(nil).ProcessSetBookingSeat), seatID)
}

// ProcessSetCinemaConfig mocks base method.
func (m *MockService) ProcessSetCinemaConfig(seatID string, seatAmount int) (interface{}, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSetCinemaConfig", seatID, seatAmount)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessSetCinemaConfig indicates an expected call of ProcessSetCinemaConfig.
func (mr *MockServiceMockRecorder) ProcessSetCinemaConfig(seatID, seatAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSetCinemaConfig", reflect.TypeOf((*MockService)(nil).ProcessSetCinemaConfig), seatID, seatAmount)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetCinemaSeatStatusInMemory mocks base method.
func (m *MockRepository) GetCinemaSeatStatusInMemory() (map[string]infrastructure.CinemaConfigParam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCinemaSeatStatusInMemory")
	ret0, _ := ret[0].(map[string]infrastructure.CinemaConfigParam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCinemaSeatStatusInMemory indicates an expected call of GetCinemaSeatStatusInMemory.
func (mr *MockRepositoryMockRecorder) GetCinemaSeatStatusInMemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCinemaSeatStatusInMemory", reflect.TypeOf((*MockRepository)(nil).GetCinemaSeatStatusInMemory))
}

// RemoveBookingSeatInMemory mocks base method.
func (m *MockRepository) RemoveBookingSeatInMemory(seatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBookingSeatInMemory", seatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBookingSeatInMemory indicates an expected call of RemoveBookingSeatInMemory.
func (mr *MockRepositoryMockRecorder) RemoveBookingSeatInMemory(seatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBookingSeatInMemory", reflect.TypeOf((*MockRepository)(nil).RemoveBookingSeatInMemory), seatID)
}

// SetBookingSeatInMemory mocks base method.
func (m *MockRepository) SetBookingSeatInMemory(seatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBookingSeatInMemory", seatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBookingSeatInMemory indicates an expected call of SetBookingSeatInMemory.
func (mr *MockRepositoryMockRecorder) SetBookingSeatInMemory(seatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBookingSeatInMemory", reflect.TypeOf((*MockRepository)(nil).SetBookingSeatInMemory), seatID)
}

// SetCinemaConfigInMemory mocks base method.
func (m *MockRepository) SetCinemaConfigInMemory(eatID string, seatAmount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCinemaConfigInMemory", eatID, seatAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCinemaConfigInMemory indicates an expected call of SetCinemaConfigInMemory.
func (mr *MockRepositoryMockRecorder) SetCinemaConfigInMemory(eatID, seatAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCinemaConfigInMemory", reflect.TypeOf((*MockRepository)(nil).SetCinemaConfigInMemory), eatID, seatAmount)
}
